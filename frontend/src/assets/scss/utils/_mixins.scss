@use 'sass:math';
@use 'sass:color';

// Use variables defined in _variables.scss
@use 'variables' as vars;

// Responsive Breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: #{vars.$breakpoint-sm - 1px}) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (min-width: #{vars.$breakpoint-sm}) and (max-width: #{vars.$breakpoint-md - 1px}) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (min-width: #{vars.$breakpoint-md}) and (max-width: #{vars.$breakpoint-lg - 1px}) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (min-width: #{vars.$breakpoint-lg}) and (max-width: #{vars.$breakpoint-xl - 1px}) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (min-width: #{vars.$breakpoint-xl}) {
      @content;
    }
  }
}

// Simplified mobile-first breakpoints
@mixin mobile {
  @media (max-width: #{vars.$breakpoint-sm - 1px}) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: #{vars.$breakpoint-sm}) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: #{vars.$breakpoint-lg}) {
    @content;
  }
}

// Glass Morphism Effect
@mixin glass-morphism {
  background: vars.$glass-background;
  backdrop-filter: vars.$glass-blur;
  -webkit-backdrop-filter: vars.$glass-blur;
  border: vars.$glass-border;
  border-radius: vars.$border-radius-md;
}

// Neon Glow Effect
@mixin neon-glow($color: vars.$primary-green) {
  box-shadow: 0 0 5px rgba($color, 0.2),
              0 0 10px rgba($color, 0.4),
              0 0 15px rgba($color, 0.6);
  text-shadow: 0 0 5px rgba($color, 0.5);
}

// Terminal Text Effect
@mixin terminal-text {
  font-family: vars.$font-heading;
  color: vars.$primary-green;
  text-shadow: 0 0 5px rgba(vars.$primary-green, 0.5);
}

// Flex Layout Helpers
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Text Truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Cyberpunk Gradient Border
@mixin cyberpunk-border {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, vars.$primary-green, vars.$primary-blue, vars.$primary-purple);
    z-index: -1;
    border-radius: calc(#{vars.$border-radius-md} + 2px);
    opacity: 0.8;
  }
}

// Interactive Hover Effects
@mixin hover-transform {
  transition: transform vars.$transition-base;
  
  &:hover {
    transform: translateY(-2px);
  }
}

// Screen Scan Line Effect (for terminal-like elements)
@mixin scan-lines {
  position: relative;
  overflow: hidden;
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, 0.05),
      rgba(0, 0, 0, 0.05) 1px,
      transparent 1px,
      transparent 2px
    );
    pointer-events: none;
  }
}

// Retro Button Style
@mixin retro-button {
  font-family: vars.$font-heading;
  text-transform: uppercase;
  letter-spacing: 1px;
  border: 2px solid currentColor;
  background: transparent;
  position: relative;
  overflow: hidden;
  z-index: 1;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    transition: all vars.$transition-base;
    z-index: -1;
  }
  
  &:hover::before {
    left: 0;
  }
} 